:root {
  --primary-color: #3d6ef7;
  --secondary-color: #6c757d;
  --purple: #6f42c1;
  --white: #fff;
  --orange: #ff6651;
  --red: #dc3545;
  --pink: #e83e8c;
  --teal: #28c997;
  --yellow: #ffc107;
  --green: #28a745;
  --success: #28a745;
  --info: #17a2b8;
  --wraning: #ffc107;
  --danger: #dc3545;
  --dark: #343a40;
  --light: #f8f9fa;
  --greenyellow: #adff2f;
}

html {
  box-sizing: border-box;
}

* {
  margin: 0;
  padding: 0;
}

*,
*:before,
*:after {
  box-sizing: border-box;
}

body {
  font-family: "Poppins", sans-serif;
  /* height: 2000px;
  padding-top: 10rem; */
}

input,
textarea,
select,
button {
  outline: none;
}

input {
  line-height: normal;
}

label,
button {
  cursor: pointer;
}

a {
  text-decoration: none;
}

img {
  display: block;
  max-width: 100%;
}

/* //! Transform: thay đổi vật thể nhưng không nhưng nó luôn nằm ở vị trí ban đầu */
/*
   Scale: scale(X,Y) | scaleX() -> theo chiều ngang | scaleY() -> theo chiều dọc
  + Zoom ra hai bên phóng to kich thước không đẩy các phần tử khác đi
    => Example:  Scale(2) = 10 x 10
*/
/*
  + Rotate: rotate() | rotateX() | rotateY()
  + Xoay phần tử theo chiều kim đồng hồ từ vị trí hiện tại của nó.
    => Example:  rotate(45deg)
*/
/*
  + Translate: translate(X,Y) | translateX() | translateY()
  + Di chuyển một phần tử sang một bên hoặc lên và xuống
    => Example:
        + translateX(100%): di chuyển một khoảng tương ứng với độ rộng của phần tử đó
        + translateY(100%): di chuyển một khoảng tương ứng với chiều cao của phần tử đó
*/

/*
  + Skew: skew(deg, deg) | skewX(deg) | skewY(deg): Xoay như hình bình hành
  + Nghiêng một phần tử sang trái hoặc phải, giống như biến hình chữ nhật thành hình bình hành.
  + Số dương (+): thì nghiêng sang bên trái, nghiêng xuống dưới
  + Số âm (-): thì nghiêng sang bên phải, nghiêng lên trên
    => Example:
        transform: skew(-30deg, -30deg);
*/

/* background-color: var(--green);
transform: scaleX(2) scaleY(2);
transform: scale(3);
transform: translateX(100%) translateY(100%);
transform: translateX(-50%) translateY(-50%);
transform: scale(2) rotate(45deg) translate(100%, 50%);
transform: skew(-30deg, -30deg); */
/* .boxed {
  width: 10rem;
  height: 10rem;
  margin: 5rem;
  background-color: var(--danger);
  transform: skewX(-30deg);
} */
/* //! Position: relative
  + Muốn dịch chuyển vật thể một cách đơn giản thì có thể dùng position: relative;
  Cùng với các thuộc tính: top, right, bottom, left để canư chỉnh vị trí của vật thể
*/
/* //! Position: absolute -> khi sử dụng thì thằng này không còn chiếm diện tích nữa
  + Thuộc tính position nó sẽ chạy theo phần tử cha
  Example: thằng cha có thuộc tính là posotion: relative thì thằng con có thuộc tính position: absolute sẽ chạy theo thằng cha và không còn chiếm khoảng trống nữa
*/
/* .wrap {
  width: 100%;
  height: 50rem;
  background-color: var(--secondary-color);
  position: relative;
} */
/*
    Sử dụng z-index: để đè lên thằng con khác
  */
/* p {
  font-size: 1.6rem;
  color: var(--white);
  font-weight: normal;
  line-height: inherit;

  position: relative;
  z-index: 1;
} */
/* Nằm góc trên cùng bên trái màn hình
    top: 0;
    left: 0;
  */
/* Nằm góc trên cùng bên phải màn hình
    top: 0;
    right: 0;
  */
/* Nằm phía dưới góc phải màn hình
    bottom: 0;
    right: 0;
  */
/* Nằm phía dưới góc trái màn hình
    bottom: 0;
    left: 0;
  */
/* Nằm chính giữa màn hình
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  */
/* Nằm overlay all
    Cách 1:
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    Cách 2:
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: auto;
      height: auto;
  */
/* Overlay theo chiều ngang
    Cách 1:
      top: 0;
      left: 0;
      right: 0;
      width: auto;
    Cách 2:
      top: 0;
      left: 0;
      width: 100%;
  */
/* Overlay theo chiều dọc
    Cách 1:
      top: 0;
      bottom: 0;
      height: 100%;
    Cách 2:
      top: 0;
      bottom: 0;
      height: auto;
  */
/* //! Thuộc tính đi kèm với position là z-index có thể giống như là các lớp xếp chồng lên nhau, thằng nào có giá trị lớn hơn sẽ đè thằng nào có giá trị nhỏ hơn
    Thuộc tính z-index luôn gắn liền với position: relative, nếu không gán position: relative thì thằng này sẽ không còn hiển thị
  */
/* .boxed {
  width: 10rem;
  height: 10rem;
  background-color: var(--danger);
  position: absolute;
} */
/*
  Thuộc tính position fixed chỉ phụ thuộc vào body
  Không nên đi kèm với thuộc tính transform -> Lỗi
*/
/* .header {
  height: 10rem;
  background-color: var(--greenyellow);
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
}
.content {
  font-size: 1.6rem;
  color: var(--red);
  font-weight: normal;
  line-height: inherit;
} */
/*
  before và after : phải đi kèm với thuộc tính content, bắt buộc phải có -> tạo lớp nền trước sau
*/
/* .boxed {
  position: relative;
  width: 10rem;
  height: 10rem;
  margin: 10rem;
}
.boxed-content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 1.6rem;
  color: yellow;
  font-weight: normal;
  line-height: inherit;
}
.boxed::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--danger);
  z-index: -1;
  transform: rotate(45deg);
} */
/*
  Cách thuộc tính của content:
    animation-name: Tên của animation cần sử dụng
    animation-duration: Thời gian chạy animation
    animation-direction: Hướng chạy animation
      + alternate: chạy qua chạy lại
      + alternate-reverse: chạy ngược lại (từ điểm kết thúc chạy ngược về lại đầu)
      + normal: chạy theo thứ tự -> Mặc định
    animation-iteration-count: Số lần chạy animation
      + count: số lần chạy
      + infinite: chạy vô tận
      + infinite-reverse: chạy ngược vô tận
    animation-timing-function: Hàm tính toán thời gian chạy animation
      + Giống hàm esasing trong transition
    animation-fill-mode:
      + forwards: chạy tới đứng ở điểm kết thúc
      + backwards: chạy ngược lại đứng ở điểm bắt đầu
      => không đi kèm với thuộc tính animation-direction
    animation-delay: sau khoảng thời gian bao lâu thì sẽ chạy aniamtion
    -> Cách viết rút gọn animation: name, duration, fill-mode, iteration-count, direction timing-function, delay
*/
/* .boxed {
  width: 10rem;
  height: 10rem;
  background-color: #28a745;
  border-radius: 50%;
  animation-name: move;
  animation-duration: 2s;
  animation-iteration-count: infinite;
  animation-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);
  animation-fill-mode: backwards;
  animation-delay: 5s;
}
@keyframes move {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(20rem);
  }
} */
.circle {
  width: 3rem;
  height: 3rem;
  background-color: var(--pink);
  border-radius: 50%;
  margin: 5rem auto;
  position: relative;
}
.circle::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: inherit;
  border-radius: inherit;
  animation-name: zoom;
  animation-duration: 1s;
  animation-iteration-count: infinite;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
}
@keyframes zoom {
  from {
    transform: scale(1);
    opacity: 1;
  }
  to {
    transform: scale(2);
    opacity: 0.25;
  }
}
